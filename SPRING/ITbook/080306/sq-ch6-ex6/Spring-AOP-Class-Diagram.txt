Spring AOP 프로젝트 - 클래스 다이어그램
===============================================

┌─────────────────────────────────────────────────────────────────────────────┐
│                              Main (main 패키지)                            │
├─────────────────────────────────────────────────────────────────────────────┤
│ + main(args: String[]): void (static)                                     │
│   - Spring 컨테이너 생성 및 초기화                                         │
│   - CommentService Bean 가져오기                                           │
│   - Comment 객체 생성 및 publishComment() 호출                            │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    │ 사용
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                        ProjectConfig (config 패키지)                        │
├─────────────────────────────────────────────────────────────────────────────┤
│ <<Configuration>>                                                          │
│ + @ComponentScan(basePackages = "services")                                │
│ + @EnableAspectJAutoProxy                                                 │
├─────────────────────────────────────────────────────────────────────────────┤
│ + loggingAspect(): LoggingAspect                                          │
│ + securityAspect(): SecurityAspect                                        │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    │ 생성
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                      LoggingAspect (aspects 패키지)                        │
├─────────────────────────────────────────────────────────────────────────────┤
│ <<Aspect>>                                                                │
├─────────────────────────────────────────────────────────────────────────────┤
│ - logger: Logger                                                          │
├─────────────────────────────────────────────────────────────────────────────┤
│ + log(joinPoint: ProceedingJoinPoint): Object                             │
│   - @Around("@annotation(ToLog)")                                         │
│   - 메서드 실행 전후 로깅 처리                                            │
│ + setLogger(logger: Logger): void                                         │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    │ 인터셉션
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                      CommentService (services 패키지)                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ <<Service>>                                                               │
├─────────────────────────────────────────────────────────────────────────────┤
│ - logger: Logger                                                          │
├─────────────────────────────────────────────────────────────────────────────┤
│ + publishComment(comment: Comment): String                                │
│   - @ToLog 어노테이션으로 인터셉션 트리거                                 │
│   - 댓글 발행 로직 처리                                                   │
│ + setLogger(logger: Logger): void                                         │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    │ 사용
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                         Comment (model 패키지)                             │
├─────────────────────────────────────────────────────────────────────────────┤
│ - text: String                                                            │
│ - author: String                                                          │
├─────────────────────────────────────────────────────────────────────────────┤
│ + getText(): String                                                       │
│ + setText(text: String): void                                             │
│ + getAuthor(): String                                                     │
│ + setAuthor(author: String): void                                         │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                        SecurityAspect (aspects 패키지)                     │
├─────────────────────────────────────────────────────────────────────────────┤
│ <<Aspect>>                                                                │
├─────────────────────────────────────────────────────────────────────────────┤
│ + @Order(1)                                                               │
│ + @Before("@annotation(ToLog)")                                           │
│ + checkUserLogged()                                                        │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                           ToLog (aspects 패키지)                           │
├─────────────────────────────────────────────────────────────────────────────┤
│ <<Annotation>>                                                            │
├─────────────────────────────────────────────────────────────────────────────┤
│ + @Retention(RetentionPolicy.RUNTIME)                                     │
│ + @Target(ElementType.METHOD)                                             │
│ - 메서드에 적용하여 AOP 인터셉션 트리거                                   │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                        Spring Container (런타임)                           │
├─────────────────────────────────────────────────────────────────────────────┤
│ AnnotationConfigApplicationContext                                         │
├─────────────────────────────────────────────────────────────────────────────┤
│ + Bean 관리                                                               │
│ + AOP 프록시 자동 생성                                                    │
│ + 의존성 주입                                                             │
│ + 라이프사이클 관리                                                       │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                           AOP Proxy (런타임)                              │
├─────────────────────────────────────────────────────────────────────────────┤
│ CommentService 프록시                                                     │
├─────────────────────────────────────────────────────────────────────────────┤
│ + 메서드 호출 인터셉션                                                    │
│ + @ToLog 어노테이션 감지                                                  │
│ + LoggingAspect 자동 실행                                                 │
│ + SecurityAspect 자동 실행                                                │
└─────────────────────────────────────────────────────────────────────────────┘

관계 설명:
==========

1. Main → ProjectConfig: Spring 컨테이너가 ProjectConfig를 로드
2. ProjectConfig → LoggingAspect: @Bean으로 LoggingAspect 생성
3. ProjectConfig → SecurityAspect: @Bean으로 SecurityAspect 생성
4. Main → CommentService: Spring 컨테이너에서 CommentService Bean 가져오기
5. CommentService → Comment: Comment 객체를 사용하여 댓글 처리
6. LoggingAspect → CommentService: @Around 어드바이스로 메서드 인터셉션
7. SecurityAspect → CommentService: @Before 어드바이스로 보안 체크
8. ToLog → CommentService: @ToLog 어노테이션으로 인터셉션 트리거

AOP 동작 흐름:
==============

1. @EnableAspectJAutoProxy로 AOP 프록시 자동 생성 활성화
2. Spring이 CommentService에 대한 프록시를 자동 생성
3. @ToLog 어노테이션이 붙은 메서드 호출 시 자동 인터셉션
4. SecurityAspect가 먼저 실행되어 보안 체크 (@Order(1))
5. LoggingAspect가 실행되어 로깅 처리 (@Around)
6. 실제 메서드 실행 후 결과 반환

패키지 구조:
============

main/          - 메인 클래스
config/        - Spring 설정 클래스
aspects/       - AOP Aspect 클래스들
services/      - 비즈니스 로직 서비스
model/         - 도메인 모델 클래스

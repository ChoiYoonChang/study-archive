Spring AOP 프로젝트 - 플로우차트 (텍스트 형식)
====================================================

프로그램 시작 (Main.main())
           │
           ▼
┌─────────────────────────────────────────────────────────┐
│ Spring 컨테이너 생성                                    │
│ AnnotationConfigApplicationContext                      │
└─────────────────────────────────────────────────────────┘
           │
           ▼
┌─────────────────────────────────────────────────────────┐
│ ProjectConfig 로드                                      │
│ @EnableAspectJAutoProxy 활성화                         │
│ @Bean 등록: LoggingAspect, SecurityAspect              │
└─────────────────────────────────────────────────────────┘
           │
           ▼
┌─────────────────────────────────────────────────────────┐
│ Bean 생성                                              │
│ - LoggingAspect Bean 생성                              │
│ - SecurityAspect Bean 생성                             │
│ - CommentService Bean 생성                             │
└─────────────────────────────────────────────────────────┘
           │
           ▼
┌─────────────────────────────────────────────────────────┐
│ AOP 프록시 생성                                        │
│ Spring이 CommentService에 대한 프록시를 자동 생성      │
│ @ToLog 어노테이션이 붙은 메서드 감지                   │
└─────────────────────────────────────────────────────────┘
           │
           ▼
┌─────────────────────────────────────────────────────────┐
│ 메서드 호출                                            │
│ service.publishComment(comment) 호출                   │
└─────────────────────────────────────────────────────────┘
           │
           ▼
┌─────────────────────────────────────────────────────────┐
│ @ToLog 어노테이션 체크                                 │
│ publishComment() 메서드에 @ToLog 어노테이션 존재 여부  │
└─────────────────────────────────────────────────────────┘
           │
           ├─ 어노테이션 있음 ──┐
           │                   │
           ▼                   ▼
┌─────────────────┐    ┌─────────────────┐
│ LoggingAspect   │    │ 실제 메서드 실행 │
│ 실행            │    │ publishComment()│
│ @Around 어드바이스│    │                 │
└─────────────────┘    └─────────────────┘
           │                   │
           │                   │
           └───────┬───────────┘
                   │
                   ▼
┌─────────────────────────────────────────────────────────┐
│ 실제 메서드 실행                                       │
│ CommentService.publishComment() 실행                   │
│ 로깅: "Publishing comment: Demo comment"              │
│ 반환값: "SUCCESS"                                     │
└─────────────────────────────────────────────────────────┘
           │
           ▼
┌─────────────────────────────────────────────────────────┐
│ LoggingAspect 완료                                     │
│ 메서드 실행 결과 로깅                                  │
│ "Method executed and returned SUCCESS"                 │
└─────────────────────────────────────────────────────────┘
           │
           ▼
┌─────────────────────────────────────────────────────────┐
│ 결과 반환                                              │
│ "SUCCESS" 반환                                         │
└─────────────────────────────────────────────────────────┘
           │
           ▼
┌─────────────────────────────────────────────────────────┐
│ 프로그램 종료                                          │
│ Main.main() 메서드 완료                               │
└─────────────────────────────────────────────────────────┘

====================================================
AOP 인터셉션 상세 흐름
====================================================

1. 메서드 호출 시점
   ┌─────────────────────────────────────────────────┐
   │ Main에서 service.publishComment() 호출          │
   └─────────────────────────────────────────────────┘
                    │
                    ▼
   ┌─────────────────────────────────────────────────┐
   │ AOP 프록시가 메서드 호출을 인터셉션            │
   └─────────────────────────────────────────────────┘
                    │
                    ▼
   ┌─────────────────────────────────────────────────┐
   │ @ToLog 어노테이션 감지                          │
   └─────────────────────────────────────────────────┘
                    │
                    ▼
   ┌─────────────────────────────────────────────────┐
   │ SecurityAspect.checkUserLogged() 실행          │
   │ @Before("@annotation(ToLog)")                  │
   │ @Order(1) - 우선순위 1                         │
   └─────────────────────────────────────────────────┘
                    │
                    ▼
   ┌─────────────────────────────────────────────────┐
   │ LoggingAspect.log() 실행                        │
   │ @Around("@annotation(ToLog)")                  │
   │ "Logging Aspect: Calling the intercepted method"│
   └─────────────────────────────────────────────────┘
                    │
                    ▼
   ┌─────────────────────────────────────────────────┐
   │ joinPoint.proceed() 호출                        │
   │ 실제 CommentService.publishComment() 실행       │
   └─────────────────────────────────────────────────┘
                    │
                    ▼
   ┌─────────────────────────────────────────────────┐
   │ 실제 메서드 실행 결과 반환                      │
   │ "SUCCESS" 반환                                  │
   └─────────────────────────────────────────────────┘
                    │
                    ▼
   ┌─────────────────────────────────────────────────┐
   │ LoggingAspect에서 결과 로깅                     │
   │ "Method executed and returned SUCCESS"          │
   └─────────────────────────────────────────────────┘
                    │
                    ▼
   ┌─────────────────────────────────────────────────┐
   │ 최종 결과 반환                                   │
   │ Main으로 "SUCCESS" 반환                         │
   └─────────────────────────────────────────────────┘

====================================================
주요 포인트
====================================================

🔑 핵심 개념:
- @EnableAspectJAutoProxy: AOP 프록시 자동 생성
- @ToLog: 메서드 인터셉션 트리거
- @Around: 메서드 실행 전후 처리
- @Before: 메서드 실행 전 처리
- @Order: Aspect 실행 순서 지정

🔄 실행 순서:
1. SecurityAspect (우선순위 1)
2. LoggingAspect (Around 어드바이스)
3. 실제 메서드 실행
4. 결과 로깅 및 반환

💡 AOP의 장점:
- 비즈니스 로직과 관심사 분리
- 코드 중복 제거
- 유지보수성 향상
- 런타임에 동적으로 동작
